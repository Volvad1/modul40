{"ast":null,"code":"var _s = $RefreshSig$();\n// useSearchForm.js\n/**\n * useSearchForm Hook.\n * This custom hook manages the state and validation of a search form.\n * It provides form state, change handlers, and validation status.\n *\n * @returns {Object} The state and handlers for the search form.\n */\n\nimport { useEffect, useState } from 'react'; // Import necessary hooks from React\nimport { useNavigate } from 'react-router-dom'; // Import navigation hook from react-router-dom\nimport { useAuth } from './AuthContext'; // Import authentication context hook\n\n// Custom hook to manage search form state and validation\nexport const useSearchForm = () => {\n  _s();\n  // State variables for form fields\n  const [companyINN, setCompanyINN] = useState('');\n  const [tonality, setTonality] = useState('Любая');\n  const [documentCount, setDocumentCount] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [checkboxStates, setCheckboxStates] = useState({\n    maxCompleteness: false,\n    businessMentions: false,\n    mainRole: false,\n    riskFactorsOnly: false,\n    includeMarketNews: true,\n    includeAnnouncements: true,\n    includeNewsSummaries: true\n  });\n\n  // Get authentication status from context\n  const {\n    isLoggedIn\n  } = useAuth();\n  // Get navigate function for programmatic navigation\n  const navigate = useNavigate();\n\n  // Redirect to auth page if user is not logged in\n  useEffect(() => {\n    if (!isLoggedIn) {\n      navigate('/auth');\n    }\n  }, [isLoggedIn, navigate]);\n\n  // State for form validation status\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Effect to validate the form when dependencies change\n  useEffect(() => {\n    // Check if required fields are filled\n    const isValid = companyINN && documentCount && startDate && endDate;\n    // Update form validation status\n    setIsFormValid(isValid);\n  }, [companyINN, documentCount, startDate, endDate, checkboxStates]);\n\n  // Handler for checkbox state changes\n  const handleCheckboxChange = event => {\n    // Get checkbox name and checked status\n    const {\n      name,\n      checked\n    } = event.target;\n    setCheckboxStates(prevState => ({\n      ...prevState,\n      // Update checkbox state\n      [name]: checked\n    }));\n  };\n\n  // Return form state and handlers\n  return {\n    companyINN,\n    setCompanyINN,\n    tonality,\n    setTonality,\n    documentCount,\n    setDocumentCount,\n    startDate,\n    setStartDate,\n    endDate,\n    setEndDate,\n    checkboxStates,\n    setCheckboxStates,\n    handleCheckboxChange,\n    isFormValid,\n    navigate\n  };\n};\n_s(useSearchForm, \"dnXYyKOHe8Ja6GbVH+jWWIgctCM=\", false, function () {\n  return [useAuth, useNavigate];\n});","map":{"version":3,"names":["useEffect","useState","useNavigate","useAuth","useSearchForm","_s","companyINN","setCompanyINN","tonality","setTonality","documentCount","setDocumentCount","startDate","setStartDate","endDate","setEndDate","checkboxStates","setCheckboxStates","maxCompleteness","businessMentions","mainRole","riskFactorsOnly","includeMarketNews","includeAnnouncements","includeNewsSummaries","isLoggedIn","navigate","isFormValid","setIsFormValid","isValid","handleCheckboxChange","event","name","checked","target","prevState"],"sources":["/Users/vadimvolodin/Downloads/ScanSkillfactory-main/src/hooks/useSearchForm.js"],"sourcesContent":["// useSearchForm.js\n/**\n * useSearchForm Hook.\n * This custom hook manages the state and validation of a search form.\n * It provides form state, change handlers, and validation status.\n *\n * @returns {Object} The state and handlers for the search form.\n */\n\nimport {useEffect, useState} from 'react'; // Import necessary hooks from React\nimport {useNavigate} from 'react-router-dom'; // Import navigation hook from react-router-dom\nimport {useAuth} from './AuthContext'; // Import authentication context hook\n\n// Custom hook to manage search form state and validation\nexport const useSearchForm = () => {\n  // State variables for form fields\n  const [companyINN, setCompanyINN] = useState('');\n  const [tonality, setTonality] = useState('Любая');\n  const [documentCount, setDocumentCount] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [checkboxStates, setCheckboxStates] = useState({\n    maxCompleteness: false,\n    businessMentions: false,\n    mainRole: false,\n    riskFactorsOnly: false,\n    includeMarketNews: true,\n    includeAnnouncements: true,\n    includeNewsSummaries: true,\n  });\n\n  // Get authentication status from context\n  const { isLoggedIn } = useAuth();\n  // Get navigate function for programmatic navigation\n  const navigate = useNavigate();\n\n  // Redirect to auth page if user is not logged in\n  useEffect(() => {\n    if (!isLoggedIn) {\n      navigate('/auth');\n    }\n  }, [isLoggedIn, navigate]);\n\n  // State for form validation status\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Effect to validate the form when dependencies change\n  useEffect(() => {\n    // Check if required fields are filled\n    const isValid = companyINN && documentCount && startDate && endDate;\n    // Update form validation status\n    setIsFormValid(isValid);\n  }, [companyINN, documentCount, startDate, endDate, checkboxStates]);\n\n  // Handler for checkbox state changes\n  const handleCheckboxChange = (event) => {\n    // Get checkbox name and checked status\n    const { name, checked } = event.target;\n    setCheckboxStates(prevState => ({\n      ...prevState,\n      // Update checkbox state\n      [name]: checked,\n    }));\n  };\n\n  // Return form state and handlers\n  return {\n    companyINN,\n    setCompanyINN,\n    tonality,\n    setTonality,\n    documentCount,\n    setDocumentCount,\n    startDate,\n    setStartDate,\n    endDate,\n    setEndDate,\n    checkboxStates,\n    setCheckboxStates,\n    handleCheckboxChange,\n    isFormValid,\n    navigate,\n  };\n};\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO,CAAC,CAAC;AAC3C,SAAQC,WAAW,QAAO,kBAAkB,CAAC,CAAC;AAC9C,SAAQC,OAAO,QAAO,eAAe,CAAC,CAAC;;AAEvC;AACA,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,OAAO,CAAC;EACjD,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC;IACnDiB,eAAe,EAAE,KAAK;IACtBC,gBAAgB,EAAE,KAAK;IACvBC,QAAQ,EAAE,KAAK;IACfC,eAAe,EAAE,KAAK;IACtBC,iBAAiB,EAAE,IAAI;IACvBC,oBAAoB,EAAE,IAAI;IAC1BC,oBAAoB,EAAE;EACxB,CAAC,CAAC;;EAEF;EACA,MAAM;IAAEC;EAAW,CAAC,GAAGtB,OAAO,CAAC,CAAC;EAChC;EACA,MAAMuB,QAAQ,GAAGxB,WAAW,CAAC,CAAC;;EAE9B;EACAF,SAAS,CAAC,MAAM;IACd,IAAI,CAACyB,UAAU,EAAE;MACfC,QAAQ,CAAC,OAAO,CAAC;IACnB;EACF,CAAC,EAAE,CAACD,UAAU,EAAEC,QAAQ,CAAC,CAAC;;EAE1B;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACAD,SAAS,CAAC,MAAM;IACd;IACA,MAAM6B,OAAO,GAAGvB,UAAU,IAAII,aAAa,IAAIE,SAAS,IAAIE,OAAO;IACnE;IACAc,cAAc,CAACC,OAAO,CAAC;EACzB,CAAC,EAAE,CAACvB,UAAU,EAAEI,aAAa,EAAEE,SAAS,EAAEE,OAAO,EAAEE,cAAc,CAAC,CAAC;;EAEnE;EACA,MAAMc,oBAAoB,GAAIC,KAAK,IAAK;IACtC;IACA,MAAM;MAAEC,IAAI;MAAEC;IAAQ,CAAC,GAAGF,KAAK,CAACG,MAAM;IACtCjB,iBAAiB,CAACkB,SAAS,KAAK;MAC9B,GAAGA,SAAS;MACZ;MACA,CAACH,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,OAAO;IACL3B,UAAU;IACVC,aAAa;IACbC,QAAQ;IACRC,WAAW;IACXC,aAAa;IACbC,gBAAgB;IAChBC,SAAS;IACTC,YAAY;IACZC,OAAO;IACPC,UAAU;IACVC,cAAc;IACdC,iBAAiB;IACjBa,oBAAoB;IACpBH,WAAW;IACXD;EACF,CAAC;AACH,CAAC;AAACrB,EAAA,CArEWD,aAAa;EAAA,QAkBDD,OAAO,EAEbD,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}