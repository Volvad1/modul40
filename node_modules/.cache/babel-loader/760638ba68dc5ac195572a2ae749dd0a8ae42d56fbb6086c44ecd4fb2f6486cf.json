{"ast":null,"code":"// helpers.js\n/**\n * Utility functions to assist with common tasks such as formatting dates and combining data.\n */\n\n/**\n * Formats a date string into a more readable format.\n *\n * @param {string} dateString - The date string to format.\n * @returns {string} The formatted date string.\n */\nexport const formatDate = dateString => {\n  const date = new Date(dateString);\n  return date.toLocaleDateString(\"ru-RU\", {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n  });\n};\n\n/**\n * Combines data by date from an array of histogram objects.\n * It aggregates total counts and risk counts for each date.\n *\n * @param {Array} data - An array of histogram objects to combine.\n * @returns {Array} An array of combined data objects sorted by date.\n */\nexport const combineDataByDate = data => {\n  const combinedData = {};\n  data.forEach(histogram => {\n    histogram.data.forEach(item => {\n      const dateKey = item.date.split('T')[0];\n      if (!combinedData[dateKey]) {\n        combinedData[dateKey] = {\n          period: formatDate(dateKey),\n          total: 0,\n          risks: 0\n        };\n      }\n      if (histogram.histogramType === 'totalDocuments') {\n        combinedData[dateKey].total += item.value;\n      } else if (histogram.histogramType === 'riskFactors') {\n        combinedData[dateKey].risks += item.value;\n      }\n    });\n  });\n\n  // Convert the combined data object into an array and sort by date\n  return Object.values(combinedData).sort((a, b) => new Date(a.period) - new Date(b.period));\n};","map":{"version":3,"names":["formatDate","dateString","date","Date","toLocaleDateString","day","month","year","combineDataByDate","data","combinedData","forEach","histogram","item","dateKey","split","period","total","risks","histogramType","value","Object","values","sort","a","b"],"sources":["/Users/vadimvolodin/Downloads/ScanSkillfactory-main/src/utils/helpers.js"],"sourcesContent":["// helpers.js\n/**\n * Utility functions to assist with common tasks such as formatting dates and combining data.\n */\n\n/**\n * Formats a date string into a more readable format.\n *\n * @param {string} dateString - The date string to format.\n * @returns {string} The formatted date string.\n */\nexport const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\"ru-RU\", {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n    });\n};\n\n/**\n * Combines data by date from an array of histogram objects.\n * It aggregates total counts and risk counts for each date.\n *\n * @param {Array} data - An array of histogram objects to combine.\n * @returns {Array} An array of combined data objects sorted by date.\n */\nexport const combineDataByDate = (data) => {\n    const combinedData = {};\n\n    data.forEach(histogram => {\n        histogram.data.forEach(item => {\n            const dateKey = item.date.split('T')[0];\n            if (!combinedData[dateKey]) {\n                combinedData[dateKey] = { period: formatDate(dateKey), total: 0, risks: 0 };\n            }\n            if (histogram.histogramType === 'totalDocuments') {\n                combinedData[dateKey].total += item.value;\n            } else if (histogram.histogramType === 'riskFactors') {\n                combinedData[dateKey].risks += item.value;\n            }\n        });\n    });\n\n    // Convert the combined data object into an array and sort by date\n    return Object.values(combinedData).sort((a, b) => new Date(a.period) - new Date(b.period));\n};"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAIC,UAAU,IAAK;EACtC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,OAAO,EAAE;IACpCC,GAAG,EAAE,SAAS;IACdC,KAAK,EAAE,SAAS;IAChBC,IAAI,EAAE;EACV,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;EACvC,MAAMC,YAAY,GAAG,CAAC,CAAC;EAEvBD,IAAI,CAACE,OAAO,CAACC,SAAS,IAAI;IACtBA,SAAS,CAACH,IAAI,CAACE,OAAO,CAACE,IAAI,IAAI;MAC3B,MAAMC,OAAO,GAAGD,IAAI,CAACX,IAAI,CAACa,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACvC,IAAI,CAACL,YAAY,CAACI,OAAO,CAAC,EAAE;QACxBJ,YAAY,CAACI,OAAO,CAAC,GAAG;UAAEE,MAAM,EAAEhB,UAAU,CAACc,OAAO,CAAC;UAAEG,KAAK,EAAE,CAAC;UAAEC,KAAK,EAAE;QAAE,CAAC;MAC/E;MACA,IAAIN,SAAS,CAACO,aAAa,KAAK,gBAAgB,EAAE;QAC9CT,YAAY,CAACI,OAAO,CAAC,CAACG,KAAK,IAAIJ,IAAI,CAACO,KAAK;MAC7C,CAAC,MAAM,IAAIR,SAAS,CAACO,aAAa,KAAK,aAAa,EAAE;QAClDT,YAAY,CAACI,OAAO,CAAC,CAACI,KAAK,IAAIL,IAAI,CAACO,KAAK;MAC7C;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;;EAEF;EACA,OAAOC,MAAM,CAACC,MAAM,CAACZ,YAAY,CAAC,CAACa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAItB,IAAI,CAACqB,CAAC,CAACR,MAAM,CAAC,GAAG,IAAIb,IAAI,CAACsB,CAAC,CAACT,MAAM,CAAC,CAAC;AAC9F,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}