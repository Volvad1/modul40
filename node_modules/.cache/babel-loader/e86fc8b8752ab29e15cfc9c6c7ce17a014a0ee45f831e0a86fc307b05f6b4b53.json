{"ast":null,"code":"var _jsxFileName = \"/Users/vadimvolodin/Downloads/ScanSkillfactory-main/src/pages/SearchPage/DateInput/DateInput.jsx\",\n  _s = $RefreshSig$();\n// DateInput.jsx\n/**\n * DateInput Component.\n * This component renders input fields for selecting a date range, with validation to ensure the dates are within a valid range.\n * It is used to allow users to input start and end dates for filtering data.\n * Error messages are displayed if the date range is invalid.\n *\n * @param {string} startDate - The current start date value.\n * @param {Function} setStartDate - A function to update the start date value.\n * @param {string} endDate - The current end date value.\n * @param {Function} setEndDate - A function to update the end date value.\n * @returns {JSX.Element} The DateInput component with date range inputs.\n */\nimport React, { useEffect, useState } from 'react';\nimport styles from './DateInput.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DateInput = ({\n  startDate,\n  setStartDate,\n  endDate,\n  setEndDate\n}) => {\n  _s();\n  // State to manage error messages\n  const [error, setError] = useState('');\n\n  // State to manage the input type for start and end date fields\n  const [inputTypeStart, setInputTypeStart] = useState('text');\n  const [inputTypeEnd, setInputTypeEnd] = useState('text');\n\n  // Validate the date range whenever startDate or endDate changes\n  useEffect(() => {\n    validateDateRange();\n  }, [startDate, endDate]);\n\n  /**\n   * Validate the date range.\n   * Sets appropriate error messages based on the validity of the date range.\n   */\n  const validateDateRange = () => {\n    const currentDate = new Date();\n    currentDate.setHours(0, 0, 0, 0);\n    if (!startDate || !endDate) {\n      setError(\"Обязательное поле\");\n    } else if (new Date(startDate) > new Date(endDate)) {\n      setError(\"Введите корректные данные\");\n    } else if (new Date(startDate) > currentDate || new Date(endDate) > currentDate) {\n      setError(\"Дата не может быть позже текущей даты\");\n    } else {\n      setError(\"\");\n    }\n  };\n\n  // Render the DateInput component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.formField,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"startDate\",\n      children: [\"\\u0414\\u0438\\u0430\\u043F\\u0430\\u0437\\u043E\\u043D \\u043F\\u043E\\u0438\\u0441\\u043A\\u0430\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: error ? `${styles.requiredAsterisk} ${styles.error}` : styles.requiredAsterisk,\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 49\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.formFieldDateInputs,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.dateInputContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.dateInputWrapper,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: inputTypeStart,\n            onFocus: () => setInputTypeStart('date'),\n            onBlur: () => {\n              validateDateRange();\n              if (!startDate) setInputTypeStart('text');\n            },\n            id: \"startDate\",\n            name: \"startDate\",\n            placeholder: \"\\u0414\\u0430\\u0442\\u0430 \\u043D\\u0430\\u0447\\u0430\\u043B\\u0430\",\n            value: startDate,\n            onChange: e => setStartDate(e.target.value),\n            className: error ? styles.error : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.dateIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.dateInputWrapper,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: inputTypeEnd,\n            onFocus: () => setInputTypeEnd('date'),\n            onBlur: () => {\n              validateDateRange();\n              if (!endDate) setInputTypeEnd('text');\n            },\n            id: \"endDate\",\n            name: \"endDate\",\n            placeholder: \"\\u0414\\u0430\\u0442\\u0430 \\u043A\\u043E\\u043D\\u0446\\u0430\",\n            value: endDate,\n            onChange: e => setEndDate(e.target.value),\n            className: error ? styles.error : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.dateIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.dateErrorMessage} ${styles.error}`,\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(DateInput, \"PLoGMw/PC2VxloeQ3fyOBhLQIbk=\");\n_c = DateInput;\nexport default DateInput;\nvar _c;\n$RefreshReg$(_c, \"DateInput\");","map":{"version":3,"names":["React","useEffect","useState","styles","jsxDEV","_jsxDEV","DateInput","startDate","setStartDate","endDate","setEndDate","_s","error","setError","inputTypeStart","setInputTypeStart","inputTypeEnd","setInputTypeEnd","validateDateRange","currentDate","Date","setHours","className","formField","children","htmlFor","requiredAsterisk","fileName","_jsxFileName","lineNumber","columnNumber","formFieldDateInputs","dateInputContainer","dateInputWrapper","type","onFocus","onBlur","id","name","placeholder","value","onChange","e","target","dateIcon","dateErrorMessage","_c","$RefreshReg$"],"sources":["/Users/vadimvolodin/Downloads/ScanSkillfactory-main/src/pages/SearchPage/DateInput/DateInput.jsx"],"sourcesContent":["// DateInput.jsx\n/**\n * DateInput Component.\n * This component renders input fields for selecting a date range, with validation to ensure the dates are within a valid range.\n * It is used to allow users to input start and end dates for filtering data.\n * Error messages are displayed if the date range is invalid.\n *\n * @param {string} startDate - The current start date value.\n * @param {Function} setStartDate - A function to update the start date value.\n * @param {string} endDate - The current end date value.\n * @param {Function} setEndDate - A function to update the end date value.\n * @returns {JSX.Element} The DateInput component with date range inputs.\n */\nimport React, {useEffect, useState} from 'react';\nimport styles from './DateInput.module.scss';\n\nconst DateInput = ({ startDate, setStartDate, endDate, setEndDate }) => {\n  // State to manage error messages\n  const [error, setError] = useState('');\n\n  // State to manage the input type for start and end date fields\n  const [inputTypeStart, setInputTypeStart] = useState('text');\n  const [inputTypeEnd, setInputTypeEnd] = useState('text');\n\n  // Validate the date range whenever startDate or endDate changes\n  useEffect(() => {\n    validateDateRange();\n  }, [startDate, endDate]);\n\n  /**\n   * Validate the date range.\n   * Sets appropriate error messages based on the validity of the date range.\n   */\n  const validateDateRange = () => {\n    const currentDate = new Date();\n    currentDate.setHours(0, 0, 0, 0);\n\n    if (!startDate || !endDate) {\n      setError(\"Обязательное поле\");\n    } else if (new Date(startDate) > new Date(endDate)) {\n      setError(\"Введите корректные данные\");\n    } else if (new Date(startDate) > currentDate || new Date(endDate) > currentDate) {\n      setError(\"Дата не может быть позже текущей даты\");\n    } else {\n      setError(\"\");\n    }\n  };\n\n  // Render the DateInput component\n  return (\n    <div className={styles.formField}>\n      <label htmlFor=\"startDate\">Диапазон поиска<span\n        className={error ? `${styles.requiredAsterisk} ${styles.error}` : styles.requiredAsterisk}>*</span>\n      </label>\n      <div className={styles.formFieldDateInputs}>\n        <div className={styles.dateInputContainer}>\n          <div className={styles.dateInputWrapper}>\n            <input\n              type={inputTypeStart}\n              onFocus={() => setInputTypeStart('date')}\n              onBlur={() => {\n                validateDateRange();\n                if (!startDate) setInputTypeStart('text');\n              }}\n              id=\"startDate\"\n              name=\"startDate\"\n              placeholder=\"Дата начала\"\n              value={startDate}\n              onChange={(e) => setStartDate(e.target.value)}\n              className={error ? styles.error : ''}\n            />\n            <span className={styles.dateIcon}></span>\n          </div>\n\n          <div className={styles.dateInputWrapper}>\n            <input\n              type={inputTypeEnd}\n              onFocus={() => setInputTypeEnd('date')}\n              onBlur={() => {\n                validateDateRange();\n                if (!endDate) setInputTypeEnd('text');\n              }}\n              id=\"endDate\"\n              name=\"endDate\"\n              placeholder=\"Дата конца\"\n              value={endDate}\n              onChange={(e) => setEndDate(e.target.value)}\n              className={error ? styles.error : ''}\n            />\n            <span className={styles.dateIcon}></span>\n          </div>\n\n        </div>\n        {error && <div className={`${styles.dateErrorMessage} ${styles.error}`}>{error}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default DateInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}