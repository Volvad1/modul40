{"ast":null,"code":"var _s = $RefreshSig$();\n// useSearchResults.js\n/**\n * useSearchResults Custom Hook.\n * This hook is used to fetch search results based on provided search parameters.\n * It manages the loading state, fetched data for histograms and documents, and any errors that occur during fetching.\n *\n * @param {Object} searchParams - The parameters used for the search query.\n * @returns {Object} An object containing the loading state, histogram data, document data, and any error.\n */\nimport { useEffect, useState } from 'react';\nconst useSearchResults = searchParams => {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [histogramData, setHistogramData] = useState(null);\n  const [documentData, setDocumentData] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        // Fetch histogram and publication IDs data concurrently\n        const [histogramResponse, publicationIdsResponse] = await Promise.all([\n        // Histogram data fetch request\n        fetch('https://gateway.scan-interfax.ru/api/v1/objectsearch/histograms', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n          },\n          body: JSON.stringify(searchParams),\n          credentials: 'omit'\n        }),\n        // Publication IDs fetch request\n        fetch('https://gateway.scan-interfax.ru/api/v1/objectsearch', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n          },\n          body: JSON.stringify(searchParams),\n          credentials: 'omit'\n        })]);\n\n        // Handle potential errors in histogram data response\n        if (!histogramResponse.ok) {\n          throw new Error(`HTTP error fetching histogram data! status: ${histogramResponse.status}`);\n        }\n\n        // Parse histogram data\n        const histogramData = await histogramResponse.json();\n\n        // Handle potential errors in publication IDs response\n        if (!publicationIdsResponse.ok) {\n          throw new Error(`HTTP error fetching publication IDs! status: ${publicationIdsResponse.status}`);\n        }\n\n        // Parse publication IDs data\n        const publicationIdsData = await publicationIdsResponse.json();\n        const publicationIds = publicationIdsData.items.map(item => item.encodedId);\n\n        // Fetch documents data using the publication IDs\n        const [documentsData] = await Promise.all([fetch('https://gateway.scan-interfax.ru/api/v1/documents', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n          },\n          body: JSON.stringify({\n            ids: publicationIds\n          }),\n          credentials: 'omit'\n        }).then(response => {\n          if (!response.ok) {\n            throw new Error(`HTTP error fetching document data! status: ${response.status}`);\n          }\n          return response.json();\n        }).catch(error => {\n          console.error('Error fetching document data:', error);\n          throw error;\n        })]);\n\n        // Update state with fetched data\n        setHistogramData(histogramData);\n        setDocumentData(documentsData);\n      } catch (error) {\n        // Handle any errors that occurred during data fetching\n        console.error('Error fetching data:', error);\n        setError(error);\n      } finally {\n        // Set loading state to false once data fetching is complete or if an error occurred\n        setIsLoading(false);\n      }\n    };\n    // Fetch data only if search parameters are provided\n    if (searchParams) {\n      fetchData();\n    }\n  }, [searchParams]);\n  return {\n    isLoading,\n    histogramData,\n    documentData,\n    error\n  };\n};\n_s(useSearchResults, \"8Uq5Gb4Uv1jdwoujxsNYZNF13k0=\");\nexport default useSearchResults;","map":{"version":3,"names":["useEffect","useState","useSearchResults","searchParams","_s","isLoading","setIsLoading","histogramData","setHistogramData","documentData","setDocumentData","error","setError","fetchData","histogramResponse","publicationIdsResponse","Promise","all","fetch","method","headers","localStorage","getItem","body","JSON","stringify","credentials","ok","Error","status","json","publicationIdsData","publicationIds","items","map","item","encodedId","documentsData","ids","then","response","catch","console"],"sources":["/Users/vadimvolodin/Downloads/ScanSkillfactory-main/src/hooks/useSearchResults.js"],"sourcesContent":["// useSearchResults.js\n/**\n * useSearchResults Custom Hook.\n * This hook is used to fetch search results based on provided search parameters.\n * It manages the loading state, fetched data for histograms and documents, and any errors that occur during fetching.\n *\n * @param {Object} searchParams - The parameters used for the search query.\n * @returns {Object} An object containing the loading state, histogram data, document data, and any error.\n */\nimport {useEffect, useState} from 'react';\n\nconst useSearchResults = (searchParams) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [histogramData, setHistogramData] = useState(null);\n  const [documentData, setDocumentData] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        // Fetch histogram and publication IDs data concurrently\n        const [histogramResponse, publicationIdsResponse] = await Promise.all([\n          // Histogram data fetch request\n          fetch('https://gateway.scan-interfax.ru/api/v1/objectsearch/histograms', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n            },\n            body: JSON.stringify(searchParams),\n            credentials: 'omit',\n          }),\n          // Publication IDs fetch request\n          fetch('https://gateway.scan-interfax.ru/api/v1/objectsearch', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n            },\n            body: JSON.stringify(searchParams),\n            credentials: 'omit',\n          }),\n        ]);\n\n        // Handle potential errors in histogram data response\n        if (!histogramResponse.ok) {\n          throw new Error(`HTTP error fetching histogram data! status: ${histogramResponse.status}`);\n        }\n\n        // Parse histogram data\n        const histogramData = await histogramResponse.json();\n\n        // Handle potential errors in publication IDs response\n        if (!publicationIdsResponse.ok) {\n          throw new Error(`HTTP error fetching publication IDs! status: ${publicationIdsResponse.status}`);\n        }\n\n        // Parse publication IDs data\n        const publicationIdsData = await publicationIdsResponse.json();\n        const publicationIds = publicationIdsData.items.map(item => item.encodedId);\n\n        // Fetch documents data using the publication IDs\n        const [documentsData] = await Promise.all([\n          fetch('https://gateway.scan-interfax.ru/api/v1/documents', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n            },\n            body: JSON.stringify({ ids: publicationIds }),\n            credentials: 'omit',\n          })\n            .then(response => {\n              if (!response.ok) {\n                throw new Error(`HTTP error fetching document data! status: ${response.status}`);\n              }\n              return response.json();\n            })\n            .catch(error => {\n              console.error('Error fetching document data:', error);\n              throw error;\n            }),\n        ]);\n\n        // Update state with fetched data\n        setHistogramData(histogramData);\n        setDocumentData(documentsData);\n      } catch (error) {\n        // Handle any errors that occurred during data fetching\n        console.error('Error fetching data:', error);\n        setError(error);\n      } finally {\n        // Set loading state to false once data fetching is complete or if an error occurred\n        setIsLoading(false);\n      }\n    };\n    // Fetch data only if search parameters are provided\n    if (searchParams) {\n      fetchData();\n    }\n  }, [searchParams]);\n\n  return { isLoading, histogramData, documentData, error };\n};\n\nexport default useSearchResults;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAEzC,MAAMC,gBAAgB,GAAIC,YAAY,IAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5BP,YAAY,CAAC,IAAI,CAAC;MAClBM,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF;QACA,MAAM,CAACE,iBAAiB,EAAEC,sBAAsB,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC;QACpE;QACAC,KAAK,CAAC,iEAAiE,EAAE;UACvEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;UACjE,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACtB,YAAY,CAAC;UAClCuB,WAAW,EAAE;QACf,CAAC,CAAC;QACF;QACAR,KAAK,CAAC,sDAAsD,EAAE;UAC5DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;UACjE,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACtB,YAAY,CAAC;UAClCuB,WAAW,EAAE;QACf,CAAC,CAAC,CACH,CAAC;;QAEF;QACA,IAAI,CAACZ,iBAAiB,CAACa,EAAE,EAAE;UACzB,MAAM,IAAIC,KAAK,CAAE,+CAA8Cd,iBAAiB,CAACe,MAAO,EAAC,CAAC;QAC5F;;QAEA;QACA,MAAMtB,aAAa,GAAG,MAAMO,iBAAiB,CAACgB,IAAI,CAAC,CAAC;;QAEpD;QACA,IAAI,CAACf,sBAAsB,CAACY,EAAE,EAAE;UAC9B,MAAM,IAAIC,KAAK,CAAE,gDAA+Cb,sBAAsB,CAACc,MAAO,EAAC,CAAC;QAClG;;QAEA;QACA,MAAME,kBAAkB,GAAG,MAAMhB,sBAAsB,CAACe,IAAI,CAAC,CAAC;QAC9D,MAAME,cAAc,GAAGD,kBAAkB,CAACE,KAAK,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,SAAS,CAAC;;QAE3E;QACA,MAAM,CAACC,aAAa,CAAC,GAAG,MAAMrB,OAAO,CAACC,GAAG,CAAC,CACxCC,KAAK,CAAC,mDAAmD,EAAE;UACzDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;UACjE,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEa,GAAG,EAAEN;UAAe,CAAC,CAAC;UAC7CN,WAAW,EAAE;QACf,CAAC,CAAC,CACCa,IAAI,CAACC,QAAQ,IAAI;UAChB,IAAI,CAACA,QAAQ,CAACb,EAAE,EAAE;YAChB,MAAM,IAAIC,KAAK,CAAE,8CAA6CY,QAAQ,CAACX,MAAO,EAAC,CAAC;UAClF;UACA,OAAOW,QAAQ,CAACV,IAAI,CAAC,CAAC;QACxB,CAAC,CAAC,CACDW,KAAK,CAAC9B,KAAK,IAAI;UACd+B,OAAO,CAAC/B,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;UACrD,MAAMA,KAAK;QACb,CAAC,CAAC,CACL,CAAC;;QAEF;QACAH,gBAAgB,CAACD,aAAa,CAAC;QAC/BG,eAAe,CAAC2B,aAAa,CAAC;MAChC,CAAC,CAAC,OAAO1B,KAAK,EAAE;QACd;QACA+B,OAAO,CAAC/B,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CC,QAAQ,CAACD,KAAK,CAAC;MACjB,CAAC,SAAS;QACR;QACAL,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IACD;IACA,IAAIH,YAAY,EAAE;MAChBU,SAAS,CAAC,CAAC;IACb;EACF,CAAC,EAAE,CAACV,YAAY,CAAC,CAAC;EAElB,OAAO;IAAEE,SAAS;IAAEE,aAAa;IAAEE,YAAY;IAAEE;EAAM,CAAC;AAC1D,CAAC;AAACP,EAAA,CA/FIF,gBAAgB;AAiGtB,eAAeA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}