{"ast":null,"code":"var _s = $RefreshSig$();\n// useAuthorization.js\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from \"./AuthContext\";\n\n/**\n * Custom hook for handling authorization logic.\n * @returns {{\n *   username: string,\n *   password: string,\n *   usernameError: boolean,\n *   passwordError: boolean,\n *   handleLogin: Function,\n *   handleUsernameChange: Function,\n *   handlePasswordChange: Function\n * }}\n */\n\nconst useAuthorization = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [usernameError, setUsernameError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n  const navigate = useNavigate();\n  const {\n    isLoggedIn,\n    setIsLoggedIn\n  } = useAuth();\n\n  // Redirect to home page if already logged in\n  useEffect(() => {\n    if (isLoggedIn) {\n      navigate('/');\n    }\n  }, [isLoggedIn, navigate]);\n\n  // Handle user login\n  const handleLogin = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch('https://gateway.scan-interfax.ru/api/v1/account/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify({\n          login: username,\n          password: password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem('accessToken', data.accessToken);\n        localStorage.setItem('tokenExpire', data.expire);\n        setIsLoggedIn(true);\n        navigate('/');\n      } else {\n        throw new Error(data.message || 'Ошибка при входе');\n      }\n    } catch (error) {\n      console.error('Ошибка аутентификации:', error);\n      setUsernameError(true);\n      setPasswordError(true);\n    }\n  };\n\n  // Reset username error state\n  const validateUsername = input => {\n    setUsernameError(false);\n  };\n\n  // Reset password error state\n  const validatePassword = input => {\n    setPasswordError(false);\n  };\n\n  // Handle username change\n  const handleUsernameChange = e => {\n    const input = e.target.value;\n    setUsername(input);\n    validateUsername(input);\n  };\n\n  // Handle password change\n  const handlePasswordChange = e => {\n    const input = e.target.value;\n    setPassword(input);\n    validatePassword(input);\n  };\n  return {\n    username,\n    password,\n    usernameError,\n    passwordError,\n    handleLogin,\n    handleUsernameChange,\n    handlePasswordChange\n  };\n};\n_s(useAuthorization, \"J9baVRGzihLNyP/6MGuZwaW55WU=\", false, function () {\n  return [useNavigate, useAuth];\n});\nexport default useAuthorization;","map":{"version":3,"names":["useEffect","useState","useNavigate","useAuth","useAuthorization","_s","username","setUsername","password","setPassword","usernameError","setUsernameError","passwordError","setPasswordError","navigate","isLoggedIn","setIsLoggedIn","handleLogin","event","preventDefault","response","fetch","method","headers","Accept","body","JSON","stringify","login","data","json","ok","localStorage","setItem","accessToken","expire","Error","message","error","console","validateUsername","input","validatePassword","handleUsernameChange","e","target","value","handlePasswordChange"],"sources":["/Users/vadimvolodin/Downloads/ScanSkillfactory-main/src/hooks/useAuthorization.js"],"sourcesContent":["// useAuthorization.js\nimport {useEffect, useState} from 'react';\nimport {useNavigate} from 'react-router-dom';\nimport {useAuth} from \"./AuthContext\";\n\n/**\n * Custom hook for handling authorization logic.\n * @returns {{\n *   username: string,\n *   password: string,\n *   usernameError: boolean,\n *   passwordError: boolean,\n *   handleLogin: Function,\n *   handleUsernameChange: Function,\n *   handlePasswordChange: Function\n * }}\n */\n\nconst useAuthorization = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [usernameError, setUsernameError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n  const navigate = useNavigate();\n  const { isLoggedIn, setIsLoggedIn } = useAuth();\n\n  // Redirect to home page if already logged in\n  useEffect(() => {\n    if (isLoggedIn) {\n      navigate('/');\n    }\n  }, [isLoggedIn, navigate]);\n\n  // Handle user login\n  const handleLogin = async (event) => {\n    event.preventDefault();\n\n    try {\n      const response = await fetch('https://gateway.scan-interfax.ru/api/v1/account/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        body: JSON.stringify({\n          login: username,\n          password: password,\n        }),\n      });\n\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem('accessToken', data.accessToken);\n        localStorage.setItem('tokenExpire', data.expire);\n        setIsLoggedIn(true);\n        navigate('/');\n      } else {\n        throw new Error(data.message || 'Ошибка при входе');\n      }\n    } catch (error) {\n      console.error('Ошибка аутентификации:', error);\n      setUsernameError(true);\n      setPasswordError(true);\n    }\n  };\n\n  // Reset username error state\n  const validateUsername = (input) => {\n    setUsernameError(false);\n  };\n\n  // Reset password error state\n  const validatePassword = (input) => {\n    setPasswordError(false);\n  };\n\n  // Handle username change\n  const handleUsernameChange = (e) => {\n    const input = e.target.value;\n    setUsername(input);\n    validateUsername(input);\n  };\n\n  // Handle password change\n  const handlePasswordChange = (e) => {\n    const input = e.target.value;\n    setPassword(input);\n    validatePassword(input);\n  };\n\n  return {\n    username,\n    password,\n    usernameError,\n    passwordError,\n    handleLogin,\n    handleUsernameChange,\n    handlePasswordChange,\n  };\n};\n\nexport default useAuthorization;"],"mappings":";AAAA;AACA,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACzC,SAAQC,WAAW,QAAO,kBAAkB;AAC5C,SAAQC,OAAO,QAAO,eAAe;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAMa,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEa,UAAU;IAAEC;EAAc,CAAC,GAAGb,OAAO,CAAC,CAAC;;EAE/C;EACAH,SAAS,CAAC,MAAM;IACd,IAAIe,UAAU,EAAE;MACdD,QAAQ,CAAC,GAAG,CAAC;IACf;EACF,CAAC,EAAE,CAACC,UAAU,EAAED,QAAQ,CAAC,CAAC;;EAE1B;EACA,MAAMG,WAAW,GAAG,MAAOC,KAAK,IAAK;IACnCA,KAAK,CAACC,cAAc,CAAC,CAAC;IAEtB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uDAAuD,EAAE;QACpFC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,MAAM,EAAE;QACV,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,KAAK,EAAEtB,QAAQ;UACfE,QAAQ,EAAEA;QACZ,CAAC;MACH,CAAC,CAAC;MAEF,MAAMqB,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC,IAAIV,QAAQ,CAACW,EAAE,EAAE;QACfC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEJ,IAAI,CAACK,WAAW,CAAC;QACrDF,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEJ,IAAI,CAACM,MAAM,CAAC;QAChDnB,aAAa,CAAC,IAAI,CAAC;QACnBF,QAAQ,CAAC,GAAG,CAAC;MACf,CAAC,MAAM;QACL,MAAM,IAAIsB,KAAK,CAACP,IAAI,CAACQ,OAAO,IAAI,kBAAkB,CAAC;MACrD;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C3B,gBAAgB,CAAC,IAAI,CAAC;MACtBE,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC;;EAED;EACA,MAAM2B,gBAAgB,GAAIC,KAAK,IAAK;IAClC9B,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC;;EAED;EACA,MAAM+B,gBAAgB,GAAID,KAAK,IAAK;IAClC5B,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC;;EAED;EACA,MAAM8B,oBAAoB,GAAIC,CAAC,IAAK;IAClC,MAAMH,KAAK,GAAGG,CAAC,CAACC,MAAM,CAACC,KAAK;IAC5BvC,WAAW,CAACkC,KAAK,CAAC;IAClBD,gBAAgB,CAACC,KAAK,CAAC;EACzB,CAAC;;EAED;EACA,MAAMM,oBAAoB,GAAIH,CAAC,IAAK;IAClC,MAAMH,KAAK,GAAGG,CAAC,CAACC,MAAM,CAACC,KAAK;IAC5BrC,WAAW,CAACgC,KAAK,CAAC;IAClBC,gBAAgB,CAACD,KAAK,CAAC;EACzB,CAAC;EAED,OAAO;IACLnC,QAAQ;IACRE,QAAQ;IACRE,aAAa;IACbE,aAAa;IACbK,WAAW;IACX0B,oBAAoB;IACpBI;EACF,CAAC;AACH,CAAC;AAAC1C,EAAA,CAjFID,gBAAgB;EAAA,QAKHF,WAAW,EACUC,OAAO;AAAA;AA6E/C,eAAeC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}