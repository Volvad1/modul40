{"ast":null,"code":"var _jsxFileName = \"/Users/vadimvolodin/Downloads/ScanSkillfactory-main/src/pages/SearchPage/DocumentCount/DocumentCount.jsx\",\n  _s = $RefreshSig$();\n// DocumentCount.jsx\n/**\n * DocumentCount Component.\n * This component handles the input for specifying the number of documents to be displayed in a search result.\n * It provides functionality for input validation and error display.\n *\n * @param {number} documentCount - The current count of documents to be displayed.\n * @param {Function} setDocumentCount - A function to update the document count state.\n * @returns {JSX.Element} The DocumentCount component with an input field for specifying the document count.\n */\nimport React, { useEffect, useState } from 'react';\nimport styles from './DocumentCount.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DocumentCount = ({\n  documentCount,\n  setDocumentCount\n}) => {\n  _s();\n  const [error, setError] = useState('');\n\n  /**\n   * Validate the document count.\n   * Sets appropriate error messages based on the validity of the document count.\n   */\n  const validateDocumentCount = () => {\n    const count = Number(documentCount);\n    if (!documentCount) {\n      setError(\"Обязательное поле\");\n    } else if (isNaN(count) || count < 1 || count > 1000) {\n      setError(\"Введите корректные данные\");\n    } else {\n      setError(\"\");\n    }\n  };\n\n  // Validate the document count whenever documentCount changes\n  useEffect(() => {\n    validateDocumentCount();\n  }, [documentCount]);\n\n  // Render the DocumentCount component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${styles.formField} ${styles.formFieldInputs}`,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"documentCount\",\n      children: [\"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0434\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u043E\\u0432 \\u0432 \\u0432\\u044B\\u0434\\u0430\\u0447\\u0435\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: error ? `${styles.requiredAsterisk} ${styles.error}` : styles.requiredAsterisk,\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      id: \"documentCount\",\n      name: \"documentCount\"\n      // Apply error styles if there's an error\n      ,\n      className: error ? styles.inputError : '',\n      value: documentCount,\n      onChange: e => {\n        const newValue = e.target.value;\n        setDocumentCount(newValue);\n        // Clear error on input change\n        setError('');\n      }\n      // Validate the document count on blur\n      ,\n      onBlur: () => validateDocumentCount(),\n      placeholder: \"\\u043E\\u0442 1 \\u0434\\u043E 1000\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorMessage,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(DocumentCount, \"AzAS/3yAg/YB9dPSCQtp4rtni54=\");\n_c = DocumentCount;\nexport default DocumentCount;\nvar _c;\n$RefreshReg$(_c, \"DocumentCount\");","map":{"version":3,"names":["React","useEffect","useState","styles","jsxDEV","_jsxDEV","DocumentCount","documentCount","setDocumentCount","_s","error","setError","validateDocumentCount","count","Number","isNaN","className","formField","formFieldInputs","children","htmlFor","requiredAsterisk","fileName","_jsxFileName","lineNumber","columnNumber","type","id","name","inputError","value","onChange","e","newValue","target","onBlur","placeholder","errorMessage","_c","$RefreshReg$"],"sources":["/Users/vadimvolodin/Downloads/ScanSkillfactory-main/src/pages/SearchPage/DocumentCount/DocumentCount.jsx"],"sourcesContent":["// DocumentCount.jsx\n/**\n * DocumentCount Component.\n * This component handles the input for specifying the number of documents to be displayed in a search result.\n * It provides functionality for input validation and error display.\n *\n * @param {number} documentCount - The current count of documents to be displayed.\n * @param {Function} setDocumentCount - A function to update the document count state.\n * @returns {JSX.Element} The DocumentCount component with an input field for specifying the document count.\n */\nimport React, {useEffect, useState} from 'react';\nimport styles from './DocumentCount.module.scss';\n\nconst DocumentCount = ({ documentCount, setDocumentCount }) => {\n  const [error, setError] = useState('');\n\n  /**\n   * Validate the document count.\n   * Sets appropriate error messages based on the validity of the document count.\n   */\n  const validateDocumentCount = () => {\n    const count = Number(documentCount);\n\n    if (!documentCount) {\n      setError(\"Обязательное поле\");\n    } else if (isNaN(count) || count < 1 || count > 1000) {\n      setError(\"Введите корректные данные\");\n    } else {\n      setError(\"\");\n    }\n  };\n\n  // Validate the document count whenever documentCount changes\n  useEffect(() => {\n    validateDocumentCount();\n  }, [documentCount]);\n\n  // Render the DocumentCount component\n  return (\n    <div className={`${styles.formField} ${styles.formFieldInputs}`}>\n      <label htmlFor=\"documentCount\">\n        Количество документов в выдаче\n        <span className={error ? `${styles.requiredAsterisk} ${styles.error}` : styles.requiredAsterisk}>*</span>\n      </label>\n      <input\n        type=\"number\"\n        id=\"documentCount\"\n        name=\"documentCount\"\n        // Apply error styles if there's an error\n        className={error ? styles.inputError : ''}\n        value={documentCount}\n        onChange={(e) => {\n          const newValue = e.target.value;\n          setDocumentCount(newValue);\n          // Clear error on input change\n          setError('');\n        }}\n        // Validate the document count on blur\n        onBlur={() => validateDocumentCount()}\n        placeholder=\"от 1 до 1000\"\n      />\n      {/* Display error message if there's an error */}\n      {error && <div className={styles.errorMessage}>{error}</div>}\n    </div>\n  );\n};\n\nexport default DocumentCount; "],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,OAAOC,MAAM,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,aAAa,GAAGA,CAAC;EAAEC,aAAa;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EAC7D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEtC;AACF;AACA;AACA;EACE,MAAMU,qBAAqB,GAAGA,CAAA,KAAM;IAClC,MAAMC,KAAK,GAAGC,MAAM,CAACP,aAAa,CAAC;IAEnC,IAAI,CAACA,aAAa,EAAE;MAClBI,QAAQ,CAAC,mBAAmB,CAAC;IAC/B,CAAC,MAAM,IAAII,KAAK,CAACF,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG,IAAI,EAAE;MACpDF,QAAQ,CAAC,2BAA2B,CAAC;IACvC,CAAC,MAAM;MACLA,QAAQ,CAAC,EAAE,CAAC;IACd;EACF,CAAC;;EAED;EACAV,SAAS,CAAC,MAAM;IACdW,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACL,aAAa,CAAC,CAAC;;EAEnB;EACA,oBACEF,OAAA;IAAKW,SAAS,EAAG,GAAEb,MAAM,CAACc,SAAU,IAAGd,MAAM,CAACe,eAAgB,EAAE;IAAAC,QAAA,gBAC9Dd,OAAA;MAAOe,OAAO,EAAC,eAAe;MAAAD,QAAA,GAAC,uKAE7B,eAAAd,OAAA;QAAMW,SAAS,EAAEN,KAAK,GAAI,GAAEP,MAAM,CAACkB,gBAAiB,IAAGlB,MAAM,CAACO,KAAM,EAAC,GAAGP,MAAM,CAACkB,gBAAiB;QAAAF,QAAA,EAAC;MAAC;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpG,CAAC,eACRpB,OAAA;MACEqB,IAAI,EAAC,QAAQ;MACbC,EAAE,EAAC,eAAe;MAClBC,IAAI,EAAC;MACL;MAAA;MACAZ,SAAS,EAAEN,KAAK,GAAGP,MAAM,CAAC0B,UAAU,GAAG,EAAG;MAC1CC,KAAK,EAAEvB,aAAc;MACrBwB,QAAQ,EAAGC,CAAC,IAAK;QACf,MAAMC,QAAQ,GAAGD,CAAC,CAACE,MAAM,CAACJ,KAAK;QAC/BtB,gBAAgB,CAACyB,QAAQ,CAAC;QAC1B;QACAtB,QAAQ,CAAC,EAAE,CAAC;MACd;MACA;MAAA;MACAwB,MAAM,EAAEA,CAAA,KAAMvB,qBAAqB,CAAC,CAAE;MACtCwB,WAAW,EAAC;IAAc;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,EAEDf,KAAK,iBAAIL,OAAA;MAAKW,SAAS,EAAEb,MAAM,CAACkC,YAAa;MAAAlB,QAAA,EAAET;IAAK;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzD,CAAC;AAEV,CAAC;AAAChB,EAAA,CApDIH,aAAa;AAAAgC,EAAA,GAAbhC,aAAa;AAsDnB,eAAeA,aAAa;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}