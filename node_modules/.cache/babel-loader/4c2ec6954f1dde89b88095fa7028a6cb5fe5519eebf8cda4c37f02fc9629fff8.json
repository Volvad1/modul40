{"ast":null,"code":"var _jsxFileName = \"/Users/vadimvolodin/Downloads/ScanSkillfactory-main/src/hooks/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// AuthContext.js\n/**\n * AuthContext Module.\n * This module provides an authentication context for managing user authentication status within the application.\n * It includes a provider component and a hook for accessing the authentication context.\n */\n\nimport React, { createContext, useContext, useEffect, useState } from 'react'; // Import necessary React functions\n\n// Create the authentication context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// AuthProvider component to wrap around parts of the app that need access to authentication context\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // State to hold the login status\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // Function to check authentication status\n  const checkAuthStatus = () => {\n    const accessToken = localStorage.getItem('accessToken'); // Get access token from local storage\n    const tokenExpire = localStorage.getItem('tokenExpire'); // Get token expiration time from local storage\n    const now = new Date(); // Get current date and time\n\n    // Check if the token is expired or not found\n    if (!accessToken || !tokenExpire || new Date(tokenExpire) <= now) {\n      console.log(\"Token expired or not found.\");\n      setIsLoggedIn(false); // Set login status to false\n      localStorage.removeItem('accessToken'); // Remove access token from local storage\n      localStorage.removeItem('tokenExpire'); // Remove token expiration time from local storage\n    } else {\n      setIsLoggedIn(true); // Set login status to true\n    }\n  };\n\n  // useEffect to run checkAuthStatus on component mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  // Provide authentication context values to children components\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      setIsLoggedIn,\n      checkAuthStatus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook to use authentication context\n_s(AuthProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","checkAuthStatus","accessToken","localStorage","getItem","tokenExpire","now","Date","console","log","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/vadimvolodin/Downloads/ScanSkillfactory-main/src/hooks/AuthContext.js"],"sourcesContent":["// AuthContext.js\n/**\n * AuthContext Module.\n * This module provides an authentication context for managing user authentication status within the application.\n * It includes a provider component and a hook for accessing the authentication context.\n */\n\nimport React, {createContext, useContext, useEffect, useState} from 'react'; // Import necessary React functions\n\n// Create the authentication context\nconst AuthContext = createContext();\n\n// AuthProvider component to wrap around parts of the app that need access to authentication context\nexport const AuthProvider = ({ children }) => {\n  // State to hold the login status\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // Function to check authentication status\n  const checkAuthStatus = () => {\n    const accessToken = localStorage.getItem('accessToken'); // Get access token from local storage\n    const tokenExpire = localStorage.getItem('tokenExpire'); // Get token expiration time from local storage\n    const now = new Date(); // Get current date and time\n\n    // Check if the token is expired or not found\n    if (!accessToken || !tokenExpire || new Date(tokenExpire) <= now) {\n      console.log(\"Token expired or not found.\");\n      setIsLoggedIn(false); // Set login status to false\n      localStorage.removeItem('accessToken'); // Remove access token from local storage\n      localStorage.removeItem('tokenExpire'); // Remove token expiration time from local storage\n    } else {\n      setIsLoggedIn(true); // Set login status to true\n    }\n  };\n\n  // useEffect to run checkAuthStatus on component mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  // Provide authentication context values to children components\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, setIsLoggedIn, checkAuthStatus }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Hook to use authentication context\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAGC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO,CAAC,CAAC;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,MAAMS,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;IACzD,MAAMC,WAAW,GAAGF,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;IACzD,MAAME,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC,CAAC;;IAExB;IACA,IAAI,CAACL,WAAW,IAAI,CAACG,WAAW,IAAI,IAAIE,IAAI,CAACF,WAAW,CAAC,IAAIC,GAAG,EAAE;MAChEE,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1CT,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;MACtBG,YAAY,CAACO,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;MACxCP,YAAY,CAACO,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;IAC1C,CAAC,MAAM;MACLV,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;IACvB;EACF,CAAC;;EAED;EACAT,SAAS,CAAC,MAAM;IACdU,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,oBACEP,OAAA,CAACC,WAAW,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEb,UAAU;MAAEC,aAAa;MAAEC;IAAgB,CAAE;IAAAJ,QAAA,EACzEA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAlB,EAAA,CAlCaF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAmCzB,OAAO,MAAMsB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM7B,UAAU,CAACK,WAAW,CAAC;AAAA;AAACwB,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}