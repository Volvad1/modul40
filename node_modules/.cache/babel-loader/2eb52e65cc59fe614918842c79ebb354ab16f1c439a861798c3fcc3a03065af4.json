{"ast":null,"code":"var _jsxFileName = \"/Users/vadimvolodin/Downloads/ScanSkillfactory-main/src/pages/SearchPage/CheckboxBlock/CheckboxBlock.jsx\";\n// CheckboxBlock.jsx\n/**\n * CheckboxBlock Component.\n * This component renders a set of checkboxes based on the provided states and labels.\n * It is used to allow users to toggle various search filters.\n * Each checkbox is accompanied by a label that describes its purpose.\n *\n * @param {Object} checkboxStates - An object containing the current state of each checkbox.\n * @param {Function} handleCheckboxChange - A function to handle changes to checkbox states.\n * @returns {JSX.Element} The CheckboxBlock component with a list of checkboxes.\n */\nimport React from 'react';\nimport styles from './CheckboxBlock.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckboxBlock = ({\n  checkboxStates,\n  handleCheckboxChange\n}) => {\n  // Labels for the checkboxes\n  const labels = {\n    maxCompleteness: \"Признак максимальной полноты\",\n    businessMentions: \"Упоминания в бизнес-контексте\",\n    mainRole: \"Главная роль в публикации\",\n    riskFactorsOnly: \"Публикации только с риск-факторами\",\n    includeMarketNews: \"Включать технические новости рынков\",\n    includeAnnouncements: \"Включать анонсы и календари\",\n    includeNewsSummaries: \"Включать сводки новостей\"\n  };\n\n  // Render the CheckboxBlock component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.rightPartSearchCheckboxBlock,\n    children: Object.keys(checkboxStates).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.checkboxContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        id: `checkbox-${key}`,\n        name: key,\n        checked: checkboxStates[key],\n        onChange: handleCheckboxChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `checkbox-${key}`,\n        className: checkboxStates[key] ? styles.checkedLabel : \"\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles.customCheckbox\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles.labelText,\n          children: labels[key]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, key, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_c = CheckboxBlock;\nexport default CheckboxBlock;\nvar _c;\n$RefreshReg$(_c, \"CheckboxBlock\");","map":{"version":3,"names":["React","styles","jsxDEV","_jsxDEV","CheckboxBlock","checkboxStates","handleCheckboxChange","labels","maxCompleteness","businessMentions","mainRole","riskFactorsOnly","includeMarketNews","includeAnnouncements","includeNewsSummaries","className","rightPartSearchCheckboxBlock","children","Object","keys","map","key","checkboxContainer","type","id","name","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","checkedLabel","customCheckbox","labelText","_c","$RefreshReg$"],"sources":["/Users/vadimvolodin/Downloads/ScanSkillfactory-main/src/pages/SearchPage/CheckboxBlock/CheckboxBlock.jsx"],"sourcesContent":["// CheckboxBlock.jsx\n/**\n * CheckboxBlock Component.\n * This component renders a set of checkboxes based on the provided states and labels.\n * It is used to allow users to toggle various search filters.\n * Each checkbox is accompanied by a label that describes its purpose.\n *\n * @param {Object} checkboxStates - An object containing the current state of each checkbox.\n * @param {Function} handleCheckboxChange - A function to handle changes to checkbox states.\n * @returns {JSX.Element} The CheckboxBlock component with a list of checkboxes.\n */\nimport React from 'react';\nimport styles from './CheckboxBlock.module.scss';\n\nconst CheckboxBlock = ({ checkboxStates, handleCheckboxChange }) => {\n  // Labels for the checkboxes\n  const labels = {\n    maxCompleteness: \"Признак максимальной полноты\",\n    businessMentions: \"Упоминания в бизнес-контексте\",\n    mainRole: \"Главная роль в публикации\",\n    riskFactorsOnly: \"Публикации только с риск-факторами\",\n    includeMarketNews: \"Включать технические новости рынков\",\n    includeAnnouncements: \"Включать анонсы и календари\",\n    includeNewsSummaries: \"Включать сводки новостей\",\n  };\n\n  // Render the CheckboxBlock component\n  return (\n    <div className={styles.rightPartSearchCheckboxBlock}>\n      {/* Iterate over checkboxStates to render each checkbox with its label */}\n      {Object.keys(checkboxStates).map((key) => (\n        <div key={key} className={styles.checkboxContainer}>\n          <input\n            type=\"checkbox\"\n            id={`checkbox-${key}`}\n            name={key}\n            checked={checkboxStates[key]}\n            onChange={handleCheckboxChange}\n          />\n          \n          {/* Custom styled checkbox and label */}\n          <label htmlFor={`checkbox-${key}`} className={checkboxStates[key] ? styles.checkedLabel : \"\"}>\n            <span className={styles.customCheckbox}></span>\n            <span className={styles.labelText}>{labels[key]}</span>\n          </label>\n        </div>\n      ))}\n    </div>\n  );\n\n};\n\nexport default CheckboxBlock;\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,aAAa,GAAGA,CAAC;EAAEC,cAAc;EAAEC;AAAqB,CAAC,KAAK;EAClE;EACA,MAAMC,MAAM,GAAG;IACbC,eAAe,EAAE,8BAA8B;IAC/CC,gBAAgB,EAAE,+BAA+B;IACjDC,QAAQ,EAAE,2BAA2B;IACrCC,eAAe,EAAE,oCAAoC;IACrDC,iBAAiB,EAAE,qCAAqC;IACxDC,oBAAoB,EAAE,6BAA6B;IACnDC,oBAAoB,EAAE;EACxB,CAAC;;EAED;EACA,oBACEX,OAAA;IAAKY,SAAS,EAAEd,MAAM,CAACe,4BAA6B;IAAAC,QAAA,EAEjDC,MAAM,CAACC,IAAI,CAACd,cAAc,CAAC,CAACe,GAAG,CAAEC,GAAG,iBACnClB,OAAA;MAAeY,SAAS,EAAEd,MAAM,CAACqB,iBAAkB;MAAAL,QAAA,gBACjDd,OAAA;QACEoB,IAAI,EAAC,UAAU;QACfC,EAAE,EAAG,YAAWH,GAAI,EAAE;QACtBI,IAAI,EAAEJ,GAAI;QACVK,OAAO,EAAErB,cAAc,CAACgB,GAAG,CAAE;QAC7BM,QAAQ,EAAErB;MAAqB;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eAGF5B,OAAA;QAAO6B,OAAO,EAAG,YAAWX,GAAI,EAAE;QAACN,SAAS,EAAEV,cAAc,CAACgB,GAAG,CAAC,GAAGpB,MAAM,CAACgC,YAAY,GAAG,EAAG;QAAAhB,QAAA,gBAC3Fd,OAAA;UAAMY,SAAS,EAAEd,MAAM,CAACiC;QAAe;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC/C5B,OAAA;UAAMY,SAAS,EAAEd,MAAM,CAACkC,SAAU;UAAAlB,QAAA,EAAEV,MAAM,CAACc,GAAG;QAAC;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC;IAAA,GAbAV,GAAG;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAcR,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAGV,CAAC;AAACK,EAAA,GApCIhC,aAAa;AAsCnB,eAAeA,aAAa;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}